// <auto-generated />
using System;
using HomeService.Infrastructure.EfCore.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeService.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250224193333_addClaim")]
    partial class addClaim
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 9,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندرعباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            ExpertId = 1,
                            Score = 8,
                            Status = 0,
                            Text = "کارشون عالیه"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Path = "Images/trending/1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Path = "Images/trending/2.jpg"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "1.png",
                            IsActive = true,
                            Title = "دکوراسیون ساختمان"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "2.png",
                            IsActive = true,
                            Title = "تأسیسات ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "3.png",
                            IsActive = true,
                            Title = "وسایل نقلیه"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "7.png",
                            IsActive = true,
                            Title = "اسباب کشی و باربری"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "8.png",
                            IsActive = true,
                            Title = "لوازم خانگی"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "6.png",
                            IsActive = true,
                            Title = "خدمات اداری"
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "7.png",
                            IsActive = true,
                            Title = "نظافت و بهداشت"
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "8.png",
                            IsActive = true,
                            Title = "دیجیتال و نرم افزار"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "بنایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "دکوراسیون"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "نقاشی ساختمان"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "درب و پنجره"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "اهنگری و جوشکاری"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            IsActive = true,
                            Title = "باغبانی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            IsActive = true,
                            Title = "سرمایش گرمایش"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsActive = true,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsActive = true,
                            Title = "برق و الکترونیک"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            IsActive = true,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            IsActive = true,
                            Title = "اسباب کشی"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            IsActive = true,
                            Title = "حمل بار"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "لوازم اشپزخانه"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "لواز شستشو"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            IsActive = true,
                            Title = "لوازم صوتی تصویری"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            IsActive = true,
                            Title = "لوازم اداری"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            IsActive = true,
                            Title = "مبلمان اداری"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "نظافت"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "خشکشویی"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "قالیشویی"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 7,
                            IsActive = true,
                            Title = "سم پاشی"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 8,
                            IsActive = true,
                            Title = "موبایل و تبلت"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            IsActive = true,
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 8,
                            IsActive = true,
                            Title = "امنیت و شبکه"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "banaii.png",
                            IsActive = true,
                            SubCategoryId = 1,
                            Title = "کاشی و سرامیک"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 200000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "gachKari.png",
                            IsActive = true,
                            SubCategoryId = 1,
                            Title = "گچ کاری"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "shisheBori.png",
                            IsActive = true,
                            SubCategoryId = 4,
                            Title = "شیشه بری"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "waterCooler.png",
                            IsActive = true,
                            SubCategoryId = 7,
                            Title = "کولر ابی"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "GasCooler.png",
                            IsActive = true,
                            SubCategoryId = 7,
                            Title = "کولر گازی"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "openPipe.png",
                            IsActive = true,
                            SubCategoryId = 8,
                            Title = "لوله بازکنی"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "powerWork.png",
                            IsActive = true,
                            SubCategoryId = 9,
                            Title = "برقکاری ساختمان"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "oilChanging.png",
                            IsActive = true,
                            SubCategoryId = 10,
                            Title = "روغنکاری ماشین"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "carRepairing.png",
                            IsActive = true,
                            SubCategoryId = 10,
                            Title = "نقاشی و صافکاری"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "changingPlace.png",
                            IsActive = true,
                            SubCategoryId = 11,
                            Title = "اسباب کشی"
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "partialChanging.png",
                            IsActive = true,
                            SubCategoryId = 12,
                            Title = "حمل بار جزعی"
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "freezer.png",
                            IsActive = true,
                            SubCategoryId = 13,
                            Title = "یخچال و فریزر"
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "washingMachine.png",
                            IsActive = true,
                            SubCategoryId = 14,
                            Title = "ماشین لباس شویی"
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "photoCopy.png",
                            IsActive = true,
                            SubCategoryId = 15,
                            Title = "فتوکپی"
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "lapTop.png",
                            IsActive = true,
                            SubCategoryId = 22,
                            Title = "لپ تاپ و نوت بوک"
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "mobileAndTablet.png",
                            IsActive = true,
                            SubCategoryId = 22,
                            Title = "موبایل و تبلت"
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "hardWareUpgrade.png",
                            IsActive = true,
                            SubCategoryId = 23,
                            Title = "ارتقای سخت افزاری"
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 300000,
                            Description = "لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ و با استفاده از طراحان گرافیک است چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است",
                            ImagePath = "computerWebs.png",
                            IsActive = true,
                            SubCategoryId = 24,
                            Title = "شبکه کامپیوتری"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeToDone")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("SubServiceId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            IsActive = true,
                            Price = 500000,
                            Status = 2,
                            SubServiceId = 1,
                            TimeToDone = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            ExpertId = 1,
                            IsActive = true,
                            Price = 500000,
                            Status = 4,
                            SubServiceId = 1,
                            TimeToDone = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Orders.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeToDone")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpertId = 1,
                            IsAccepted = false,
                            IsActive = true,
                            OrderId = 2,
                            Price = 505000,
                            TimeToDone = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpertId = 1,
                            IsAccepted = true,
                            IsActive = true,
                            OrderId = 1,
                            Price = 505000,
                            TimeToDone = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Lname = "ahmadi",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Lname = "ahamdi",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.ExpertSubService", b =>
                {
                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<int>("SubServiceId")
                        .HasColumnType("int");

                    b.HasKey("ExpertId", "SubServiceId");

                    b.HasIndex("SubServiceId");

                    b.ToTable("ExpertSubServices");

                    b.HasData(
                        new
                        {
                            ExpertId = 1,
                            SubServiceId = 1
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Biography")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            CityId = 1,
                            ConcurrencyStamp = "d9b0f212-3c43-4c67-bba1-303cc82f13f5",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            Fname = "Safoura",
                            Lname = "ahmadi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEYElkmU8CUuRLrvzHwkr+KZQSIYjReSWOd2FzOAPi3sm+ZxaBpA9F+fqwsJ3soaSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MS23CZ5FYG75543TAIMC5DDNKCVV7B74",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            CityId = 1,
                            ConcurrencyStamp = "a3d5f1c2-9b12-4e7a-a3c1-45edc91e36b7",
                            Email = "Expert@gmail.com",
                            EmailConfirmed = false,
                            Fname = "Tahoura",
                            Lname = "ahmadi",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            NormalizedUserName = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJkglU8KXnLbrWvBHwkr+KZQSIYjReSWOd2FzOAPi3sm+ZxaBpA9F+fqwsJ3soaSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JK98SD2FYG75543TAIMC5DDNKCVV7B89",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Expert@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Balance = 100000m,
                            CityId = 1,
                            ConcurrencyStamp = "f7c8e9a1-2b34-4d59-931a-72bf4c61c5f9",
                            Email = "Customer@gmail.com",
                            EmailConfirmed = false,
                            Fname = "Mahoura",
                            Lname = "ahmadi",
                            LockoutEnabled = false,
                            NormalizedEmail = "Customer@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGklU8NXYfKrZHvBHwkr+KZQSIYjReSWOd2FzOAPi3sm+ZxaBpA9F+fqwsJ3soaSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "PQ76XZ9FYG75543TAIMC5DDNKCVV7B32",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Customer@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Admin",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "Admin@gmail.com",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Expert",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "Expert@gmail.com",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "ExpertId",
                            ClaimValue = "1",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "Customer",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                            ClaimValue = "Customer@gmail.com",
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "CustomerId",
                            ClaimValue = "1",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.Comment", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.Image", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Orders.Order", "Order")
                        .WithMany("Images")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Categories.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubService", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Categories.SubCategory", "SubCategory")
                        .WithMany("SubServices")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("CompletedOrders")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HomeService.Domain.Core.Entities.Categories.SubService", "SubService")
                        .WithMany("Orders")
                        .HasForeignKey("SubServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Orders.Suggestion", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Orders.Order", "Order")
                        .WithMany("Suggestions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Admin", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("HomeService.Domain.Core.Entities.Users.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("HomeService.Domain.Core.Entities.Users.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("HomeService.Domain.Core.Entities.Users.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.ExpertSubService", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.Expert", "Expert")
                        .WithMany("ExpertSubServices")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Categories.SubService", "SubService")
                        .WithMany("ExpertSubServices")
                        .HasForeignKey("SubServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("SubService");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.User", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.BaseEntities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubCategory", b =>
                {
                    b.Navigation("SubServices");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Categories.SubService", b =>
                {
                    b.Navigation("ExpertSubServices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Orders.Order", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CompletedOrders");

                    b.Navigation("ExpertSubServices");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("HomeService.Domain.Core.Entities.Users.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });
#pragma warning restore 612, 618
        }
    }
}
